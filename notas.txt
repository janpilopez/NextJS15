#iniciar proyecto
nvm use v18.20.5 #usar node18
nvm run default --version

npm install -g pnpm
pnpm --version
pnpm i //instalar dependencia
pnpm dev
##CAMBIAR ESTILOS DINAMICOS SEGUN ESTADOS O PROPS CON CLSX
Usando el clsxbiblioteca para cambiar nombres de clase

Puede haber casos en los que usted puede necesitar estilo condicional un elemento basado en el estado o alguna otra condición.

clsx
es una biblioteca que te permite alternar nombres de clase fácilmente. Recomendamos echar un vista a la documentación

para más detalles, pero aquí está el uso básico:

    Supongamos que quieres crear un InvoiceStatuscomponente que acepta status. El estado puede ser 'pending'o o 'paid'.
    Si es 'paid', quieres que el color sea verde. Si es 'pending', quieres que el color sea gris.


Otras soluciones de estilo

Además de los enfoques que hemos discutido, también puedes diseñar tu aplicación Next.js con:

    Sass que le permite importar .cssy .scssArchivos.
    Bibliotecas CSS-in-JS como estilo-jsx

, componentes de estilo
, y emoción

    .

Echa un vistate de la documentación de CSS para más información.

#EN NEXTJS PARA CREAR UNA RUTA O PAGINA SIEMPRE SE DEBE CREAR LA CARPETA Y EL COMPONENTE CON PAGE.TSX (ESTO ES COMO REFERENCIAR AL INDEX.HTML)

#LOS LAYOUTS SE HEREDAN DE MANERA GLOBAL EN LA RUTA PRINCIPAL APP/LAYOUTS
//AQUI DEBEMOS SOLO CARGAR LA BASE HTML , METADATOS ENTRE OTROS, Y EN CADA COMPONENTE INVOCAR SU LAYOUT O CREARLO, YA QUE NO SE IMPORTA AUTOMATICAMENTE A EXCEPCION DE DE LA RAIZS

#OJOO REACT15 UTILIZA YA RENDERIZADO SERVIDOR Y RENDERIZADO CLIENTE


#HOOK PATHNAME -> EN UN HOOK DEL LADO CLIENTE POR TANTO HAY QUE USAR 'use client' para llamarlo
Un patrón común de interfaz de usuario es mostrar un enlace activo para indicar al usuario en qué página están actualmente. Para ello, necesitas obtener la ruta actual del usuario desde la URL. Next.js proporciona un gancho llamado usePathname()que puede utilizar para comprobar la ruta e implementar este patrón.

#CONEXION BASE DE DATOS
PODEMOS TRABAJAR TANTO COMO CON POSTGRES COMO SUPABASE ENTRE OTROS, AQUI TRABAJAMOS CON SUPASEBASE QUE ES COMO MONGO NOS DA UN CONEXION VIA API
pnpm i @vercel/postgres

#INSTALAR SUPABASE
pnpm add @supabase/supabase-js
npm install @supabase/supabase-js


##RENDER DINAMICO Y RENDER ESTATICO
//CUANDO POR EJEMPLO CONSUMIMOS DOS API Y LA PAGINA DEBE CARGARSE HAY UNA DEMORA LARGA.
como una lenta captura de datos. El resultado es que ahora toda su página está bloqueada de mostrar UI(INTERFAZ GRAFICA) al visitante mientras se obtienen los datos. 
Lo que nos lleva a un desafío común que los desarrolladores tienen que resolver:
Con la representación dinámica, su aplicación es tan rápida como su obtención de datos más lenta.


¿Cuál es la diferencia clave entre renderizado estático y dinámico?
Tienes razón en que tanto el renderizado estático como el dinámico pueden hacer un fetch de datos cuando la página se carga. Sin embargo, lo que realmente distingue a ambos no es solo el fetch, sino cuándo y cómo se obtiene la data.

Renderizado Estático (Static Rendering):

El término "build time" significa el momento en que se compila tu aplicación, lo cual ocurre cuando ejecutas npm run build en Next.js.
¿Qué pasa en build time?
En este caso, Next.js obtiene los datos solo una vez, antes de que se despliegue la aplicación en el servidor o en producción. Este proceso de compilación crea las páginas estáticas (archivos HTML) que estarán disponibles para los usuarios.
Esto es útil si el contenido no cambia frecuentemente. La página ya se genera una sola vez, y luego se sirve directamente a cada usuario sin necesidad de generar los datos nuevamente.
¿Qué pasa si los datos cambian después de build time?
Si los datos cambian, la página no se actualiza automáticamente. Para manejar estos casos, puedes usar mecanismos como Incremental Static Regeneration (ISR) en Next.js, que te permite revalidar y regenerar ciertas páginas de manera automática (en el background).
Ejemplo: Si tienes una página de blog, el contenido del blog se generará en build time. Si alguien visita la página del blog después de que se haya desplegado, obtendrá la misma página generada, sin hacer nuevos fetch de datos. Sin embargo, si agregas un nuevo artículo y regeneras el sitio, Next.js volverá a actualizar esa página durante el próximo despliegue.

Renderizado Dinámico (Dynamic Rendering):

El renderizado dinámico se refiere a generar la página en cada solicitud del usuario. Aquí no hay un build time fijo como en el caso del renderizado estático.
¿Qué pasa en cada visita?
En este caso, cuando un usuario solicita la página, Next.js hace una consulta a la base de datos o API en tiempo real, obtiene los datos actualizados y genera la página HTML dinámicamente en el servidor antes de enviarla al usuario.
Este proceso ocurre cada vez que un usuario visita la página y es útil para contenido que cambia frecuentemente, como un dashboard o una página con estadísticas en tiempo real.
Relación entre Build Time, Servidor y Next.js
Build Time (Tiempo de Construcción): Se refiere a cuando Next.js está compilando tu aplicación, antes de que esté en producción. Cuando ejecutas el comando npm run build, Next.js hace la compilación de todo el código, incluye los datos que definiste en getStaticProps (si estás usando renderizado estático) y crea los archivos finales que se despliegan en el servidor o en un entorno de producción. Esto no es el servidor en sí, es solo la fase de construcción.

Servidor en Next.js:
Sí, Next.js es un framework que incluye capacidades de servidor. De hecho, Next.js puede ser ejecutado como una aplicación en el servidor para manejar peticiones de usuarios. En un entorno de producción, Next.js se ejecuta en un servidor (en Vercel, por ejemplo, o en tu propio servidor) y es capaz de generar tanto páginas estáticas como dinámicas en función de cómo hayas configurado tu aplicación.

Resumen Clave:
Build Time en el contexto de Next.js se refiere al momento en que compilas tu aplicación para producción, lo que genera páginas estáticas. Este proceso ocurre cuando usas el comando npm run build. En ese momento, Next.js hace fetch solo una vez (para los datos estáticos) y genera HTML estático que se servirá durante la vida útil de la página.

Renderizado Dinámico ocurre en tiempo de ejecución (cuando un usuario solicita la página), y el servidor genera dinámicamente la página con los datos más recientes.

Next.js como servidor: Si bien Next.js puede generar páginas estáticas, también puede funcionar como un servidor en sí mismo, procesando peticiones HTTP y generando páginas dinámicas en cada visita.


##STREAMING
NEXTJS PERMITE MOSTRAR UN COMPONENTE MIENTRAS SE CARHGAN OTROS COMPONENTES LENTOS (QUE HACEN LLAMADAS FETCH, ETC)
Hay dos maneras en que implementas streaming en Next.js:
    1 A nivel de página, con la loading.tsxArchivo.
    2 Para componentes específicos, con <Suspense>.
SOLO ES NECESARIO CREAR loading.tsx en la ruta correspondiente y se cargará primero el componente mientra lo demas se procesandocomo en dashboard/loading.tsx

#SKELETONS
SON BASE DE PLANTILLAS EN BLANCA SIN DATOS QUE PERMITEN SER MOSTRADAS MIENTRAS SE CARGA UN RECURSO, EN ESTE caso se usan
EN FUNCION CON STREAMING, QUE SIGNIFICA: STREAMING RETORNA EL SKELETON MIENTRA SE PROCESA LA PAGINAArregación del error esqueleto de carga con grupos de ruta
su esqueleto de carga se aplicará A NIVEL JERARQUICO CON LAS DEMAS SUBCARPETAS O MISMO NIVEL, POR TANTO PARA SOLUCIONARLO
SE USA Grupos de Rutas DONDE CREAMOS UNA SUBCARPETA(overview) EN EL COMPONENTE DONDE SE NECESITA CARGAR EL SKELETON Y LO MOVEMOS SOLAMENTE ALLI 
#nota asi mismo se debe mover la page.tsx al overview tambien



#patrón staggered effect:  agrupar las cartas usando un componente de envoltorio, ENVOLVER OTROS COMPONENTES

# Partial Prerendering nuevo concepto, prerending parcial
Es combinar renderización estática, representación dinámica y streaming en la misma ruta con Partial Prerrendering (PPR).
#What are the holes in the context of Partial Prerendering?
Ubicaciones donde el contenido dinámico se cargará asincrónicamente,  donde el contenido dinámico se cargará asincrónicamente en el tiempo de petición.
el contenido estatico se carga de primer manera y dejara espacio al contenido dinamico como en una pagina de venta de rpoductos, carga la informacion y el carrito y productos recomendados cargaran asincronamente evitando ralentizacion
HABILITAR PPR EN next.config.js con
const nextConfig = {
  experimental: {
    ppr: 'incremental',
  },
};
PARA INSTALARLO SE HACE ESTO PORQUE TODAVIA SIGUE EXPERIMENTAL
pnpm i next@canary
EJECUTAR ESTO SI NOS DA ERROR, CON ESTO INSTALAMOS LA ULTIMA VERSION EXPERIMENTAL DE REACTJ QUE NOS PERMITIRA USAR EL PPR
RECORDAR QUE ESTO ES AUTOMATICO NO TENEMOS QUE CONFIGURAR NADA EL CODIGO SIGUE IGUAL, ES TIPO UNA OPTIMIZACION

#BUSQUEDAS
Estos son los ganchos de cliente Next.js que usarás para implementar la funcionalidad de búsqueda:
    useSearchParams- Permite acceder a los parámetros de la URL actual. Por ejemplo, la búsqueda params para esta URL /dashboard/invoices?page=1&query=pendingse vería así: {page: '1', query: 'pending'}.
    usePathname- Deja que leas el nombre de la URL actual. Por ejemplo, para la ruta /dashboard/invoices, usePathnamevolvería '/dashboard/invoices'.
    useRouter- Permite la navegación entre rutas dentro de los componentes del cliente programáticamente. Hay múltiples métodos que puede utilizar. https://nextjs.org/docs/app/api-reference/functions/use-router#userouter



Cuándo usar el useSearchParams()gancho vs. el searchParams.. .. . . . .

Usted podría haber notado que usó dos maneras diferentes para extraer params de búsqueda. Si usas uno u otro depende de si estás trabajando en el cliente o en el servidor.

    <Search>es un componente de cliente, por lo que utilizó el useSearchParams()gancho para acceder a los params desde el cliente.
    <Table>es un Server Component que obtiene sus propios datos, por lo que puede pasar el searchParamsprop de la página al componente.

Como regla general, si desea leer los params del cliente, use el useSearchParams()gancho, ya que esto evita tener que volver al servidor.

###Debouncing 
es una práctica de programación que limita la velocidad a la que una función puede disparar. Por ejemplo sólo quieres consultar la base de datos cuando el usuario ha dejado de escribir
si hay un evento que cambia cada click esto ejecutara la funcion a cada rato y puede ralentizar todo el servidor, BD por tanto hacemos uso para hacer un retraso o cuando el usuario dejo de escribir como en un evento onChange
instalarlo
pnpm i use-debounce


#MUTING data -- SERVER ACTIONS
Las acciones de servidor también están profundamente integradas con el caché Next.js. Cuando un formulario se envía a través de una Acción Server, no sólo se puede utilizar la acción para mutar los datos, sino que también puede revalidar el caché asociado usando APIs como revalidatePathy revalidateTag.

#FORM DATA - EXTRAER DATOS
https://developer.mozilla.org/en-US/docs/Web/API/FormData/append
Si usted está trabajando con formularios que tienen muchos campos, es posible que desee considerar el uso de la entries()
método con JavaScript Object.fromEntries()
. Por ejemplo:
const rawFormData = Object.fromEntries(formData.entries())


##Validación y coacción de tipo
Es importante validar que los datos de su formulario se alinean con los tipos esperados en su base de datos. Por ejemplo, si añades un console.logdentro de su acción:

console.log(typeof rawFormData.amount);
Te darás cuenta de eso. amountes de tipo stringy no number. Esto es porque inputelementos con type="number"en realidad devuelve una cuerda, no un número.
Para manejar la validación de tipo, tiene algunas opciones. Si bien puede validar manualmente los tipos, el uso de una biblioteca de validación de tipo puede ahorrarle tiempo y esfuerzo. Para su ejemplo, usaremos Zod
, una biblioteca de validación de TypeScript-first que puede simplificar esta tarea para usted.

## import { revalidatePath } from 'next/cache';
Next.js tiene un Cliente-side Router Cache que almacena los segmentos de ruta en el navegador del usuario durante un tiempo. Junto con la prefetching, esta caché garantiza que los usuarios puedan navegar
rápidamente entre rutas mientras reducen el número de solicitudes hechas al servidor.
La función revalidatePath en Next.js se utiliza para revalidar una ruta específica y forzar que se actualice el contenido en caché de una página estática o generada de forma incremental.
Esto es útil en situaciones en las que los datos de una página cambian dinámicamente (por ejemplo, cuando agregas una nueva factura) y deseas asegurarte de que la página vuelva a generarse con los datos más recientes.

#SEGMENTOS DE RUTA DINAMICA
Next.js le permite crear segmentos de rutas dinámicas cuando no conoce el nombre exacto del segmento y desea crear rutas
basadas en datos. Esto podría ser títulos de entradas de blog, páginas de productos, etc. Puede crear segmentos de ruta
dinámicos envolviendo el nombre de una carpeta entre corchetes. Por ejemplo, [id], [post]o o [slug].
example: invoices/[id]/edit/page.tsx

##ACCION DE SERVIDOR
EXPLCIACION EN -UI/INVOICES/EDIT-FORM.TSX

#ERRORES CON NEXTJS Y NOTFOUND
Maneje 404 errores con el notFoundfunción

Otra forma en que puede manejar los errores con la gracia es usando el notFoundfunción. Mientras que error.tsxes útil para atracar todos los errores,
notFound se puede usar cuando tratas de buscar un recurso que no existe.
MAS SOBRE ERRORES EN INOVICES ERROR Y EDIT/ERROR

##NEXT LINT
Exsiten funciones de accesibilidad disponibles en Next.js y algunas prácticas comunes para hacer sus aplicaciones más accesibles.
Next.js incluye el eslint-plugin-jsx-a11y
plugin en su configuración ESLint para ayudar a captar problemas de accesibilidad temprano. Por ejemplo, 
este plugin advierte si tiene imágenes sin alttexto, use la aria-*y roleatributos incorrectamente, y más.
package.json
"scripts": {
    "build": "next build",
    "dev": "next dev",
    "start": "next start",
    "lint": "next lint"
},

pnpm lint
Esto le guiará a través de la instalación y configuración de ESLint para su proyecto. 


##VALIDACIONES FORMS LADO SERVIDOR / SIDE-SERVER

##NEXT AUTH
//PERMITE MANEJAR SESIONES POR AUTENTICACION Y AUTORIZACION
pnpm i next-auth@beta
//generar clave secreta de la aplicacion
openssl rand -base64 32
//result: m7sQr60j0vB4J7bLeuHv0BxAyPr+6hvP/hStV4hNZIw=
//Entonces, en tu .envfile, agregue la clave generada a la AUTH_SECRETvariable:


##BCRIPT PROBLEMA CON NEXTJS
Es una buena práctica la hashteda de contraseñas antes de almacenarlas en una base de datos. Hashing convierte una contraseña en una cadena de caracteres de longitud fija, que parece aleatoria, proporcionando una capa de seguridad incluso si los datos del usuario están expuestos.
En tu seed.js Archivo, usted usó un paquete llamado bcryptpara la contraseña del usuario antes de almacenarla en la base de datos. Lo volverás a usar más tarde en este capítulo para comparar que la contraseña introducida por el usuario coincide con la de la base de datos. Sin embargo, tendrá que crear un archivo separado para el bcryptpaquetes. Esto es porque bcryptse basa en API de Node.js no disponible en Next.js Middleware.